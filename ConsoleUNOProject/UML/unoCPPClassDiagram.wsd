@startuml UNOCPPClassDiagram

title UNOCPPClassDiagram

abstract class Service
{
    - Init()
    - Stop()
}
abstract class Player
{
    string name
    Hand hand
    bool HasShoutedUno

    PlayCard(Card)
    CheckValidCardType()
    vector<Card> GetHand()
}
abstract class Card
{
    - Color
    - Place()
}
abstract class Deck
{
    vector<Card> cards
    vector<Card> GetCards()
    void RemoveCard(Card)
    void AddCard(Card)
    void ReceiveCards(vector<Cards> cards)
    vector<Cards> GiveCardsByAmount(int amount)
}
class ConsoleService << (S, #FF7700) Static >> 
{
    Print(string)
    Space(int lineCount)
}
class EventBus << (S, #FF7700) Static >>
{
    SubscribeEvent
    UnsubscribeEvent
    Publish
}
class CardEffect{
    Execute()
}
class Turn
{
    int count
    Player currentPlayer
    FlowDirection currentFlowDirection
    Card& topCard
}
class GameService
{
    DiscardStack discardStack
    vector<Turn> Turns
    GetDiscardStack()
    GenerateDiscardStack()
    StartGame()
    NextTurn()
}
class PlayerService
{
    - Load all Players data?
    - Initialize Players Decks?
    GetPlayerDeck(playerId)
}
class InputService
{
    GetInput<T>(string message)
}
class CardFactory
{
    CreateSpecialCard(CardEffect, Color color)
    CreateNumberCard(int number, Color color)
}
class SpecialCard 
{
    CardEffect effect
}
class NumberCard
{
    int Number
}

class ServiceInitializer
class BotPlayer
class HumanPlayer
class Hand
class DiscardStack
class PlayerService
class Color 


PlayerService --o Service
GameService --o Service
InputService --o Service

BotPlayer --o Player
HumanPlayer --o Player

SpecialCard --o Card
NumberCard --o Card

Hand o-- Deck
DiscardStack o-- Deck

SpecialCard *-- CardEffect
Player *-- Hand
GameService *-- DiscardStack
GameService *-- Turn
Card *-- Color

Service <-- ServiceInitializer

ServiceInitializer <-- PlayerService
ServiceInitializer <-- GameService
ServiceInitializer <-- InputService

CardFactory --> NumberCard
CardFactory --> SpecialCard

GameService --> CardFactory
InputService <-- PlayerService
'-------------Legend----------------------------------
abstract class Abstraction

ImplementationOf --o Abstraction
IsComponentOf --* UsesComponent
DependsOn --> Dependency
Parent --|> Child
'-----------------------------------------------------------
skinParam TitleFontSize 32
skinparam backgroundColor Teal
skinParam ClassBackgroundColor DarkSlateGrey
skinParam DefaultFontColor White
skinParam ClassFontColor SkyBlue
skinParam ArrowColor LightSkyBlue 
skinparam DefaultFontSize 25
skinparam DefaultFontName Roboto